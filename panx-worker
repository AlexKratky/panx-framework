<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
$PATH = __DIR__;
$SCRIPT_PATH = __DIR__."/app/panx-worker/scripts/";

if(file_exists(__DIR__."/app/panx-worker/TS_CMD.php")) {
    require(__DIR__."/app/panx-worker/TS_CMD.php");
    require(__DIR__."/app/panx-worker/TextTable.php");

    $PROGRAM_INFO["name"] = "panx-worker";
    $PROGRAM_INFO["version"] = "v0.1 (30-04-2019) [dd-mm-yyyy]";
    $CONFIG = (file_exists(".config")) ? parse_ini_file(".config", true) : null;

    $BINDS = array('route-list');

    if ($ARGS_COUNT == 0) {
        info_msg("panx-worker v0.1. Use argument ? to see help.");
    } else {
        if($ARGS[0] == "?") {
            //HELP
            displayInfo();
            write("Available parameters: " . colorize("create", "red", "black"));
            exit();
        }
        if( function_exists ( $ARGS[0] ) && !in_array($ARGS[0], $BINDS) ) {
            call_user_func($ARGS[0]);
        } else {
            //binds
            switch($ARGS[0]) {
                case 'route-list':
                    routelist();
                    break;
                default:
                    error_msg("Invalid argument.");
                    break;
            }
        }
    }
} else {
    echo "Class TS_CMD was not found. The only argument you can call is 'install [VERSION]'" . "\n";
    $ARGS = $argv;
    array_shift($ARGS);

    if(isset($ARGS[0])) {
        if($ARGS[0] == "install") {
            install($ARGS);
        }
    }
}

function create() {
    global $ARGS_COUNT;
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;
    global $CONFIG;
    if (!isset($ARGS[1])) {error("You need to specify what to create.");}
    if($ARGS[1] == "doc" || $ARGS[1] == "documentation") {
        require $SCRIPT_PATH."create/doc.php";

    } else if($ARGS[1] == "post") {
        require $SCRIPT_PATH."create/post.php";

    } else if($ARGS[1] == "version") {
        require $SCRIPT_PATH."create/version.php";


    }
}

function install($ARGS) {
    //$ARGS_COUNT = count($argv) - 1;
    //$ARGS = $argv;
    //array_shift($ARGS);
    global $SCRIPT_PATH;
    global $PATH;
    
    require $SCRIPT_PATH."install/download.php";

    if (!isset($ARGS[2]) && $ARGS[1] != "clean") {
        require $SCRIPT_PATH."install/install.php";
    } else if ($ARGS[1] == "clean" || $ARGS[2] == "clean") {
        require $SCRIPT_PATH . "install/clean.php";
    } else {
        error("Invalid argument.\n");
    }
    echo "\nNow you just need to run command 'composer install' and create '.config' file (You can do it by running command: 'php panx-worker config').\n";
    unlink(__DIR__."/temp/$version.zip");
    rrmdir(__DIR__."/temp/$version/");
}

function update() {
    global $ARGS_COUNT;
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;

    require $SCRIPT_PATH."update.php";

}

function api() {
    global $ARGS_COUNT;
    global $ARGS;
}

function extension() {
    global $ARGS_COUNT;
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;
    if(empty($ARGS[1])) {
        require $SCRIPT_PATH . "extension/list.php";
    } else {
        if($ARGS[1] == "install") {
            require($SCRIPT_PATH . "extension/install.php");
        } else {
            if(file_exists($SCRIPT_PATH . "extension/".strtolower($ARGS[1]).".php")) {
                require $SCRIPT_PATH . "extension/".strtolower($ARGS[1]).".php";
            } else {
                error_msg("Unkown extension");
            }
        }
    }
}

function routelist() {
    global $ARGS_COUNT;
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;

    require $SCRIPT_PATH."routelist.php";

}

function info() {
    global $ARGS_COUNT;
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;

    require $SCRIPT_PATH."info.php";    
}

function config() {
    global $PATH;
    global $SCRIPT_PATH;

    require $SCRIPT_PATH."config.php";
}

function serve() {
    global $ARGS;
    global $PATH;
    global $SCRIPT_PATH;
    
    require $SCRIPT_PATH."serve.php";
}





function displayChangelog($path) {
    global $SCRIPT_PATH;

    require $SCRIPT_PATH."display_changelog.php";
}



function rrmdir($dir)
{
    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if ($object != "." && $object != "..") {
                if (is_dir($dir . "/" . $object)) {
                    rrmdir($dir . "/" . $object);
                } else {
                    unlink($dir . "/" . $object);
                }

            }
        }
        rmdir($dir);
    }
}

function addFolderToZip($dir, $zipArchive, $zipdir = '') {
    $relativePath = str_replace(__DIR__."/","",$dir);

    if(preg_match('/public\/download\/.*/', $relativePath) || preg_match('/public\\\download\\\.*/', $relativePath) || preg_match('/\.git\/.*/', $relativePath) || preg_match('/\.git\\.*/', $relativePath)) {
        echo "Skipping: " . $relativePath ."\n";
        return;
    }

    if (is_dir($dir)) {
        if ($dh = opendir($dir)) {
            if (!empty($zipdir)) {
                $zipArchive->addEmptyDir($zipdir);
            }
            while (($file = readdir($dh)) !== false) {
                if (!is_file($dir . $file)) {
                    if (($file !== ".") && ($file !== "..")) {
                        addFolderToZip($dir . $file . "/", $zipArchive, $zipdir . $file . "/");
                    }
                } else {
                    $zipArchive->addFile($dir . $file, $zipdir . $file);
                }
            }
        }
    }
}
